spring.kafka.bootstrap-servers=10.8.14.47:9092,10.8.14.47:9093,10.8.14.47:9094
#spring.kafka.admin.cLient-id=
#spring.kafka.admin.ail-fast=false
#spring.kafka.admin.properties=
#spring.kafka.admin.ssl.key-password=
#spring.kafka.admin.ssl.key-store-Location
#spring.kafka.admin.ssl.key-store-password=
#spring.kafka.admin.ssl.key-store-type=
#spring.kafka.admin.ssl.protocol=
#spring.kafka.admin.ssl.trust-store-Location=
#spring.kafka.admin.ssl.trust-store-password=
#spring.kafka.admin.ssl.trust-store-type=
#spring.kafka.admin.fail-fast=false
# Kafka Producer \u914D\u7F6E\u9879
# 0-\u4E0D\u5E94\u7B54\u30021-leader \u5E94\u7B54\u3002all-\u6240\u6709 leader \u548C follower \u5E94\u7B54\u3002
spring.kafka.producer.acks=1  
# \u53D1\u9001\u5931\u8D25\u65F6\uFF0C\u91CD\u8BD5\u53D1\u9001\u7684\u6B21\u6570
spring.kafka.producer.retries=3 
# \u6D88\u606F\u7684 key \u7684\u5E8F\u5217\u5316
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer 
# \u6D88\u606F\u7684 value \u7684\u5E8F\u5217\u5316
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# Kafka Consumer \u914D\u7F6E\u9879
# \u8BBE\u7F6E\u6D88\u8D39\u8005\u5206\u7EC4\u6700\u521D\u7684\u6D88\u8D39\u8FDB\u5EA6\u4E3A earliest \u3002\u53EF\u53C2\u8003\u535A\u5BA2 https://blog.csdn.net/lishuangzhe7047/article/details/74530417 \u7406\u89E3
spring.kafka.consumer.auto-offset-reset=earliest 
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.properties.spring.json.trusted.packages=cn.iocoder.springboot.lab03.kafkademo.message

spring.kafka.consumer.max-poll-records=3
#spring.kafka.consumer.fetch-max-wait=
#spring.kafka.consumer.auto-commit-interval=
#spring.kafka.consumer.bootstrap-servers=
#spring.kafka.consumer.client-id=
#spring.kafka.consumer.fetch-min-size=
#spring.kafka.consumer.group-id=
#spring.kafka.consumer.heartbeat-interval=
#spring.kafka.consumer.isolation-Level=
##spring.kafka.consumer.properties.
#spring.kafka.consumer.ssl.key-password=
#spring.kafka.consumer.ssl.key-store-Location=
#spring.kafka.consumer.ssL.key-store-password=
#spring.kafka.consumer.ssl.key-store-type=
#spring.kafka.consumer.ssL.protocol=
#spring.kafka.consumer.ssL.trust-store-Location=
#spring.kafka.consumer.ssL.trust-store-password=
#spring.kafka.consumer.ssL.trust-store-type=
# \u4E24\u6B21poll\u64CD\u4F5C\u5141\u8BB8\u7684\u6700\u5927\u65F6\u95F4\u95F4\u9694\u3002\u5355\u4F4D\u6BEB\u79D2\u3002\u9ED8\u8BA4\u503C300000\uFF085\u5206\u949F\uFF09\u3002

# Kafka Consumer Listener \u76D1\u542C\u5668\u914D\u7F6E
spring.kafka.listener.missing-topics-fatal=false
#spring.kafka.listener.ack-mode=MANUAL
# spring-kafka INFO \u65E5\u5FD7\u592A\u591A\u4E86\uFF0C\u6240\u4EE5\u6211\u4EEC\u9650\u5236\u53EA\u6253\u5370 ERROR \u7EA7
#logging.level.org.springframework.kafka=ERROR
# kafka INFO \u65E5\u5FD7\u592A\u591A\u4E86\uFF0C\u6240\u4EE5\u6211\u4EEC\u9650\u5236\u53EA\u6253\u5370 ERROR \u7EA7\u522B
#logging.level.org.apache.kafka=ERROR

## \u6D4B\u8BD51  \u65F6\u95F4\u95F4\u9694\u592A\u77ED\uFF0C\u5F15\u53D1 Revoking
## max.poll.records \u4E00\u6B21poll\u64CD\u4F5C\u83B7\u53D6\u7684\u6D88\u606F\u6570\u91CF\u3002\u9ED8\u8BA4\u503C500\u3002
##spring.kafka.consumer.max-poll-records=1
## \u4E24\u6B21poll\u64CD\u4F5C\u5141\u8BB8\u7684\u6700\u5927\u65F6\u95F4\u95F4\u9694\u3002\u5355\u4F4D\u6BEB\u79D2\u3002\u9ED8\u8BA4\u503C300000\uFF085\u5206\u949F\uFF09\u3002
#spring.kafka.consumer.properties.max.poll.interval.ms=300
##[Consumer clientId=consumer-2, groupId=demo01-B-consumer-group-DEMO_01] Revoking previously assigned partitions []
##demo04-consumer-group-DEMO_04: partitions revoked: []
##[Consumer clientId=consumer-1, groupId=demo04-consumer-group-DEMO_04] (Re-)joining group
